-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Lambda.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Lambda.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Lambda.Abs.Ident -> Result
transIdent x = case x of
  Lambda.Abs.Ident string -> failure x

transTerm :: Lambda.Abs.Term -> Result
transTerm x = case x of
  Lambda.Abs.Var integer -> failure x
  Lambda.Abs.Unit -> failure x
  Lambda.Abs.Named ident -> failure x
  Lambda.Abs.App term1 term2 -> failure x
  Lambda.Abs.Lam term -> failure x
  Lambda.Abs.Mu term -> failure x
  Lambda.Abs.Let binding term -> failure x
  Lambda.Abs.LetDef binding -> failure x

transBinding :: Lambda.Abs.Binding -> Result
transBinding x = case x of
  Lambda.Abs.BindPair ident term -> failure x
