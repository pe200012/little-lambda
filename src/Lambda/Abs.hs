-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Lambda.

module Lambda.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Term
    = Var Integer
    | Unit
    | Named Ident
    | App Term Term
    | Lam Term
    | Mu Term
    | Let Binding Term
    | LetDef Binding
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Binding = BindPair Ident Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

